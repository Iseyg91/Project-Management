import discord
from discord.ext import commands
from datetime import datetime, timedelta, timezone
import random
import re
import pytz
from collections import defaultdict, deque  
from typing import Optional
from discord.ui import View

# D√©finition des IDs et collections (√† passer depuis bot.py)
# Ces variables seront initialis√©es dans bot.py et pass√©es aux cogs via bot.db_collections et bot.config_ids
# Pour l'instant, je les mets ici pour que les fonctions utilitaires puissent les r√©f√©rencer.
# Elles seront remplac√©es par des acc√®s via `bot.db_collections` et `bot.config_ids` dans les cogs.
db_collections = {}
config_ids = {}


# --- ID Etherya Partenariats ---
partnership_channel_id = 1355158081855688745
PARTNER_ROLE_ID = 1355157749994098860 # Renomm√© pour √©viter le conflit avec ROLE_ID g√©n√©rique

# --- ID Etherya ---
BOUNTY_CHANNEL_ID = 1355298449829920950
ETHERYA_SERVER_ID = 1034007767050104892
AUTORIZED_SERVER_ID = 1034007767050104892
WELCOME_CHANNEL_ID = 1355198748296351854

# --- ID Etherya Pouvoir ---
# -- Oeil D√©moniaque --
OEIL_ID = 1363949082653098094
OEIL_ROLE_ID = 1364123507532890182 # Renomm√©
# -- Float --
FLOAT_ID = 1363946902730575953
ROLE_FLOAT_ID = 1364121382908067890
# -- Pokeball --
POKEBALL_ID = 1363942048075481379
# -- Infini --
INFINI_ID = [1363939565336920084, 1363939567627145660, 1363939486844850388]
ANTI_ROB_ROLE = 1363964754678513664
# -- Armure du Berserker --
ARMURE_ID = 1363821649002238142
ANTI_ROB_ID = 1363964754678513664
# -- Rage du Berserker --
RAGE_ID = 1363821333624127618
ECLIPSE_ROLE_ID = 1364115033197510656
# -- Ultra Instinct --
ULTRA_ID = 1363821033060307106
# -- Haki des Rois --
HAKI_ROI_ID = 1363817645249527879
HAKI_SUBIS_ID = 1364109450197078026
# -- Arme D√©moniaque Imp√©rial --
ARME_DEMONIAQUE_ID = 1363817586466361514
# -- Heal (Appel de l'exorciste) --
HEAL_ID = 1363873859912335400
MALUS_ROLE_ID = 1363969965572755537
# -- Benediction --
BENEDICTION_ROLE_ID = 1364294230343684137
# -- Divin --
DIVIN_ROLE_ID = 1367567412886765589
# -- Bombe --
BOMBE_ID = 1365316070172393572
# -- Marine & Pirates --
ISEY_MARINE_ID = 1365631932964012142
ISEY_PIRATE_ID = 1365682636957421741

# --- ID Etherya Nen ---
PERMISSION_ROLE_ID = 1363928528587984998
LICENSE_ITEM_ID = 7
nen_roles = {
    "renforcement": 1363306813688381681,
    "emission": 1363817609916584057,
    "manipulation": 1363817536348749875,
    "materialisation": 1363817636793810966,
    "transformation": 1363817619529924740,
    "specialisation": 1363817593252876368,
}
nen_drop_rates = [
    ("renforcement", 24.5), ("emission", 24.5), ("manipulation", 16.5),
    ("materialisation", 16.5), ("transformation", 17.5), ("specialisation", 0.5),
]
MATERIALISATION_IDS = [1363817636793810966, 1363817593252876368]
ITEMS_INTERDITS = [202, 197, 425, 736, 872, 964, 987]
MANIPULATION_ROLE_ID = 1363974710739861676
AUTHORIZED_MANI_IDS = [1363817593252876368, 1363817536348749875]
EMISSION_IDS = [1363817593252876368, 1363817609916584057]
TARGET_ROLE_ID = 1363969965572755537 
RENFORCEMENT_IDS = [1363306813688381681, 1363817593252876368]
RENFORCEMENT_ROLE_ID = 1363306813688381681 

# --- ID Etherya Fruits du D√©mon ---
ROLE_UTILISATEUR_GLACE = 1365311608259346462
ROLE_GEL = 1365313259280007168

# --- ID Etherya Pirates & Marines ---
marine_roles = {
    "Amiral en chef": 1365683477868970204, "Commandant": 1365683407023243304,
    "Lieutenant": 1365683324831531049, "Matelot": 1365683175019516054,
}
pirate_roles = {
    "Roi des Pirates": 1365682989996052520, "Yonko": 1365682989996052520,
    "Corsaire": 1365682918243958826, "Pirate": 1365682795501977610,
}

# ID des r√¥les et combien ils touchent
ROLE_PAY = {
    1355157636009427096: 100_000,  # CROWN_ISEY
    1355234995555270768: 90_000,   # BRAS_DROIT
    1355157638521815236: 80_000,   # CO-OWNER
    1357258052147089450: 70_000,   # ADMINISTRATEUR
    1355157640640200864: 60_000,   # RESP_ID
    1355157686815293441: 50_000    # STAFF_ID
}
# -- ID TICKET --
TRANSCRIPT_CHANNEL_ID_ECO = 1355158107956707498 # Renomm√© pour √©viter le conflit
SUPPORT_ROLE_ID_ECO = 1355157686815293441 # Renomm√©

# --- ID Etherya ---
ETHERYA_SERVER_ID = 1034007767050104892
AUTORIZED_SERVER_ID = 1034007767050104892
WELCOME_CHANNEL_ID = 1355198748296351854

log_channels_eco = { # Renomm√© pour √©viter le conflit
    "sanctions": 1365674258591912018,
    "messages": 1365674387700977684,
    "utilisateurs": 1365674425394921602,
    "nicknames": 1365674498791051394,
    "roles": 1365674530793586758,
    "vocal": 1365674563458826271,
    "serveur": 1365674597692997662,
    "permissions": 1365674740915765278,
    "channels": 1365674773107052644,
    "webhooks": 1365674805143146506,
    "bots": 1365674841344049162,
    "boosts": 1365674914740441158
}

# Fonctions utilitaires
def create_embed(title, description, color=discord.Color.blue(), footer_text=""):
    embed = discord.Embed(title=title, description=description, color=color)
    embed.set_footer(text=footer_text)
    return embed

def has_permission(ctx, perm):
    # V√©rifie si l'utilisateur a la permission sp√©cifi√©e ou s'il est l'owner du bot
    return ctx.author.id == config_ids.get("ISEY_ID") or getattr(ctx.author.guild_permissions, perm, False)

def is_higher_or_equal(ctx, member):
    # V√©rifie si le r√¥le de l'auteur est sup√©rieur ou √©gal √† celui du membre cibl√©
    return member.top_role >= ctx.author.top_role

async def send_log(ctx, member, action, reason, duration=None):
    # Cette fonction devra √™tre adapt√©e pour utiliser les IDs de log_channels
    # qui sont maintenant dans bot.config_ids ou une structure similaire.
    # Pour l'exemple, je vais utiliser un ID g√©n√©rique ou un print.
    # Dans un vrai bot, vous auriez une logique pour trouver le bon canal de log.
    log_channel_id = config_ids.get("WARN_LOG_CHANNEL") # Exemple
    if log_channel_id:
        log_channel = ctx.guild.get_channel(log_channel_id)
        if log_channel:
            embed = create_embed("üö® Sanction appliqu√©e", f"{member.mention} a √©t√© sanctionn√©.", discord.Color.red(), ctx, member, action, reason, duration)
            await log_channel.send(embed=embed)
    else:
        print(f"LOG: {member.name} {action} for {reason} (Duration: {duration})")

async def send_dm(member, action, reason, duration=None):
    try:
        embed = create_embed("üö® Vous avez re√ßu une sanction", "Consultez les d√©tails ci-dessous.", discord.Color.red())
        embed.add_field(name="‚öñÔ∏è Sanction", value=action, inline=True)
        embed.add_field(name="üìú Raison", value=reason, inline=False)
        if duration:
            embed.add_field(name="‚è≥ Dur√©e", value=duration, inline=True)
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un DM √† {member.display_name}.")

# utils.py
def load_guild_settings(bot, guild_id: int) -> dict:
    """Charge la configuration d'une guild depuis MongoDB"""
    try:
        return bot.db_collections["setup"].find_one({'guild_id': str(guild_id)}) or {}
    except Exception as e:
        print(f"[WARN] Impossible de charger les param√®tres pour le serveur {guild_id}: {e}")
        return {}




def get_premium_servers():
    """R√©cup√®re les IDs des serveurs premium depuis la base de donn√©es."""
    premium_docs = db_collections.get("setup_premium", {}).find({}, {"_id": 0, "guild_id": 1})
    return {doc["guild_id"] for doc in premium_docs}

async def is_blacklisted(user_id: int) -> bool:
    result = db_collections.get("delta_bl", {}).find_one({"user_id": str(user_id)})
    return result is not None

def add_sanction(guild_id, user_id, action, reason, duration=None):
    sanction_data = {
        "guild_id": guild_id,
        "user_id": user_id,
        "action": action,
        "reason": reason,
        "duration": duration,
        "timestamp": datetime.utcnow()
    }
    db_collections.get("sanction", {}).insert_one(sanction_data)

def get_log_channel(guild, key):
    # Cette fonction d√©pendra de la structure de vos IDs de log_channels
    # Pour l'instant, elle est simplifi√©e.
    log_channel_id = {
        "sanctions": config_ids.get("WARN_LOG_CHANNEL"),
        "messages": None, # Ajoutez les IDs r√©els ici
        # ... autres cl√©s
    }.get(key)
    if log_channel_id:
        return guild.get_channel(log_channel_id)
    return None

# Nouvelle fonction pour les logs √©conomiques, utilisant les collections pass√©es
async def log_eco_channel(bot_instance, guild_id, user, action, amount, balance_before, balance_after, note=""):
    config = bot_instance.db_collections["logs"].find_one({"guild_id": str(guild_id)})
    channel_id = config.get("eco_log_channel") if config else None

    if not channel_id:
        return  # Aucun salon configur√©

    channel = bot_instance.get_channel(channel_id)
    if not channel:
        return  # Salon introuvable (peut avoir √©t√© supprim√©)

    embed = discord.Embed(
        title="üí∏ Log √âconomique",
        color=discord.Color.gold(),
        timestamp=datetime.utcnow()
    )
    embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else None)
    embed.add_field(name="Action", value=action, inline=True)
    embed.add_field(name="Montant", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Solde", value=f"Avant: {balance_before}\nApr√®s: {balance_after}", inline=False)

    if note:
        embed.add_field(name="Note", value=note, inline=False)

    await channel.send(embed=embed)

def get_cf_config(guild_id):
    config = db_collections.get("idees", {}).find_one({"guild_id": guild_id})
    if not config:
        config = {
            "guild_id": guild_id,
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        db_collections.get("idees", {}).insert_one(config)
    return config

def get_presentation_channel_id(guild_id: int):
    data = db_collections.get("presentation", {}).find_one({"guild_id": guild_id})
    return data.get("presentation_channel") if data else None

def get_user_partner_info(user_id: str):
    partner_data = db_collections.get("partner", {}).find_one({"user_id": user_id})
    if partner_data:
        return partner_data['rank'], partner_data['partnerships']
    return None, None

async def get_protection_data(guild_id):
    data = db_collections.get("protection", {}).find_one({"guild_id": str(guild_id)})
    return data or {}

def format_mention(id, type_mention):
    if not id or id == "Non d√©fini":
        return "‚ùå **Non d√©fini**"
    if isinstance(id, int) or (isinstance(id, str) and id.isdigit()):
        if type_mention == "user":
            return f"<@{id}>"
        elif type_mention == "role":
            return f"<@&{id}>"
        elif type_mention == "channel":
            return f"<#{id}>"
        return "‚ùå **Mention invalide**"
    return "‚ùå **Format invalide**"

PROTECTIONS = [
    "anti_massban", "anti_masskick", "anti_bot", "anti_createchannel",
    "anti_deletechannel", "anti_createrole", "anti_deleterole",
    "anti_everyone", "anti_spam", "anti_links", "whitelist"
]

PROTECTION_DETAILS = {
    "anti_massban": ("üö´ Anti-MassBan", "Emp√™che les bannissements massifs."),
    "anti_masskick": ("üë¢ Anti-MassKick", "Emp√™che les expulsions massives."),
    "anti_bot": ("ü§ñ Anti-Bot", "Bloque l'ajout de bots non autoris√©s."),
    "anti_createchannel": ("üì§ Anti-Cr√©ation de salon", "Emp√™che la cr√©ation non autoris√©e de salons."),
    "anti_deletechannel": ("üì• Anti-Suppression de salon", "Emp√™che la suppression non autoris√©e de salons."),
    "anti_createrole": ("‚ûï Anti-Cr√©ation de r√¥le", "Emp√™che la cr√©ation non autoris√©e de r√¥les."),
    "anti_deleterole": ("‚ûñ Anti-Suppression de r√¥le", "Emp√™che la suppression non autoris√©e de r√¥les."),
    "anti_everyone": ("üì£ Anti-Everyone", "Emp√™che l'utilisation abusive de @everyone ou @here."),
    "anti_spam": ("üí¨ Anti-Spam", "Emp√™che le spam excessif de messages."),
    "anti_links": ("üîó Anti-Liens", "Emp√™che l'envoi de liens non autoris√©s."),
    "whitelist": ("‚úÖ Liste blanche", "Utilisateurs exempt√©s des protections.")
}

def generate_global_status_bar(data: dict) -> str:
    protections = [prot for prot in PROTECTIONS if prot != "whitelist"]
    total = len(protections)
    enabled_count = sum(1 for prot in protections if data.get(prot, False))
    ratio = enabled_count / total

    bar_length = 10
    filled_length = round(bar_length * ratio)
    bar = "üü©" * filled_length + "‚¨õ" * (bar_length - filled_length)
    return f"**S√©curit√© Globale :** `{enabled_count}/{total}`\n{bar}"

def format_protection_field(prot, data, guild, bot):
    name, desc = PROTECTION_DETAILS[prot]
    enabled = data.get(prot, False)
    status = "‚úÖ Activ√©e" if enabled else "‚ùå D√©sactiv√©e"
    updated_by_id = data.get(f"{prot}_updated_by")
    updated_at = data.get(f"{prot}_updated_at")

    modifier = None
    if updated_by_id:
        modifier = guild.get_member(int(updated_by_id)) or updated_by_id

    formatted_date = ""
    if updated_at:
        dt = updated_at.replace(tzinfo=pytz.utc).astimezone(pytz.timezone("Europe/Paris"))
        formatted_date = f"üïì {dt.strftime('%d/%m/%Y √† %H:%M')}"

    mod_info = f"\nüë§ Modifi√© par : {modifier.mention if isinstance(modifier, discord.Member) else modifier}" if modifier else ""
    date_info = f"\n{formatted_date}" if formatted_date else ""

    value = f"> {desc}\n> **Statut :** {status}{mod_info}{date_info}"
    return name, value

async def notify_owner_of_protection_change(guild, prot, new_value, interaction):
    if guild and guild.owner:
        try:
            embed = discord.Embed(
                title="üîê Mise √† jour d'une protection sur votre serveur",
                description=f"**Protection :** {PROTECTION_DETAILS[prot][0]}\n"
                            f"**Statut :** {'‚úÖ Activ√©e' if new_value else '‚ùå D√©sactiv√©e'}",
                color=discord.Color.green() if new_value else discord.Color.red()
            )
            embed.add_field(
                name="üë§ Modifi√©e par :",
                value=f"{interaction.user.mention} (`{interaction.user}`)",
                inline=False
            )
            embed.add_field(name="üè† Serveur :", value=guild.name, inline=False)
            embed.add_field(
                name="üïì Date de modification :",
                value=f"<t:{int(datetime.utcnow().timestamp())}:f>",
                inline=False
            )
            embed.add_field(
                name="‚ÑπÔ∏è Infos suppl√©mentaires :",
                value="Vous pouvez reconfigurer vos protections √† tout moment avec la commande `/protection`.",
                inline=False
            )

            await guild.owner.send(embed=embed)
        except discord.Forbidden:
            print("Impossible d‚Äôenvoyer un DM √† l‚Äôowner.")
        except Exception as e:
            print(f"Erreur lors de l'envoi du DM : {e}")

def is_admin_or_isey():
    async def predicate(ctx):
        return ctx.author.guild_permissions.administrator or ctx.author.id == config_ids.get("ISEY_ID")
    return commands.check(predicate)

THUMBNAIL_URL = "images_GITHUB/3e3bd3c24e33325c7088f43c1ae0fadc.png" # Chemin corrig√©

# üé≠ Emojis dynamiques pour chaque serveur
EMOJIS_SERVEURS = ["üåç", "üöÄ", "üî•", "üëæ", "üèÜ", "üéÆ", "üè¥‚Äç‚ò†Ô∏è", "üèïÔ∏è"]

# ‚öúÔ∏è ID du serveur Etherya
ETHERYA_ID = 1034007767050104892 # Utiliser l'ID r√©el si diff√©rent

def boost_bar(level):
    """G√©n√®re une barre de progression pour le niveau de boost."""
    filled = "üü£" * level
    empty = "‚ö´" * (3 - level)
    return filled + empty

# Dictionnaire pour stocker les messages supprim√©s {channel_id: deque[(timestamp, auteur, contenu)]}
sniped_messages = defaultdict(deque)

# Liste des cat√©gories sensibles
sensitive_categories = {
    "insultes_graves": ["fils de pute"],
    "discours_haineux": ["nigger", "nigga", "negro", "chintok", "bougnoule", "p√©d√©","sale p√©d√©","sale arabe", "sale noir", "sale juif", "sale blanc", "race inf√©rieure", "sale race", "encul√© de ta race", "triso"],
    "ideologies_haineuses": ["raciste", "homophobe", "x√©nophobe", "transphobe", "antis√©mite", "islamophobe", "supr√©maciste", "fasciste", "nazi", "n√©onazi", "dictateur", "extr√©miste", "fanatique", "radicalis√©", "djihadiste"],
    "violences_crimes": ["viol", "p√©dophilie", "inceste", "p√©docriminel", "grooming", "agression", "assassin", "meurtre", "homicide", "g√©nocide", "extermination", "d√©capitation", "lynchage", "massacre", "torture", "suicidaire", "prise d'otage", "terrorisme", "attentat", "bombardement", "ex√©cution", "immolation", "traite humaine", "esclavage sexuel", "kidnapping", "tueur en s√©rie", "infanticide", "parricide"],
    "drogues_substances": ["coca√Øne", "h√©ro√Øne", "crack", "LSD", "ecstasy", "GHB", "fentanyl", "m√©thamph√©tamine", "cannabis", "weed", "opium", "drogue", "drogue de synth√®se", "trafic de drogue","overdose", "shoot√©", "stoned", "sniffer", "shit"],
    "contenus_sexuels": ["pornographie", "porno", "prostitution", "escort", "masturbation", "fellation", "pipe", "sodomie", "exhibition", "f√©tichisme", "orgie", "gode", "p√©n√©tration", "nudit√©", "camgirl", "onlyfans", "porno enfant", "sextape", "branlette", "bite",],
    "fraudes_financi√®res": ["scam", "arnaque", "fraude", "chantage", "extorsion", "√©vasion fiscale", "fraude fiscale", "d√©tournement de fonds","blanchiment d'argent", "crypto scam", "phishing bancaire", "vol d'identit√©", "usurpation"],
    "attaques_menaces": ["raid", "ddos", "dox", "doxx", "hack", "hacking", "botnet", "crash bot", "flood", "booter", "keylogger", "phishing", "malware", "trojan", "ransomware", "brute force", "cheval de troie", "injection SQL"],
    "raids_discord": ["mass ping", "raid bot", "join raid", "leaver bot", "spam bot", "token grabber", "auto join", "multi account", "alt token", "webhook spam", "webhook nuker", "selfbot", "auto spam"],
    "harc√®lement_haine": ["swat", "swatting", "harass", "threaten", "kill yourself", "kys", "suicide", "death threat", "pedo", "grooming", "harc√®lement", "cyberharc√®lement", "intimidation", "menace de mort", "appel au suicide"],
    "personnages_probl√©matiques": ["Hitler", "Mussolini", "Staline", "Pol Pot", "Mao Zedong", "Benito Mussolini", "Joseph Staline", "Adolf Hitler", "Kim Jong-il","Kim Jong-un", "Idi Amin", "Saddam Hussein", "Bachar el-Assad", "Ben Laden", "Oussama Ben Laden", "Ayman al-Zawahiri", "Heinrich Himmler", "Joseph Goebbels", "Hermann G√∂ring", "Adolf Eichmann", "Rudolf Hess", "Slobodan Milo≈°eviƒá", "Radovan Karad≈æiƒá", "Ratko Mladiƒá", "Francisco Franco", "Augusto Pinochet", "Fidel Castro", "Che Guevara", "Ayatollah Khomeini", "Al-Baghdadi", "Abu Bakr al-Baghdadi", "Anders Behring Breivik", "Charles Manson", "Ted Bundy", "Jeffrey Dahmer", "Richard Ramirez", "John Wayne Gacy", "Albert Fish", "Ed Gein", "Luca Magnotta", "Peter K√ºrten", "David Berkowitz", "Ariel Castro", "Yitzhak Shamir", "Meir Kahane", "Nicolae Ceau»ôescu", "Vladimir Poutine", "Alexander Lukashenko", "Mengistu Haile Mariam", "Yahya Jammeh", "Omar el-B√©chir", "Jean-B√©del Bokassa", "Robert Mugabe", "Mobutu Sese Seko", "Laurent-D√©sir√© Kabila", "Joseph Kony", "Enver Hoxha", "Gaddafi", "Muammar Kadhafi", "R√≠os Montt", "Reinhard Heydrich", "Ismail Enver", "Anton Mussert", "Ante Paveliƒá", "Vidkun Quisling", "Stepan Bandera", "Ramush Haradinaj", "Slobodan Praljak", "Milomir Stakiƒá", "Theodore Kaczynski", "Eric Harris", "Dylan Klebold", "Brenton Tarrant", "Seung-Hui Cho", "Stephen Paddock", "Patrick Crusius", "Elliot Rodger", "Nikolas Cruz", "Dylann Roof", "Timothy McVeigh", "Tamerlan Tsarnaev", "Dzhokhar Tsarnaev", "Sayfullo Saipov", "Mohamed Merah", "Amedy Coulibaly", "Ch√©rif Kouachi", "Salah Abdeslam", "Abdelhamid Abaaoud", "Mohammed Atta", "Khalid Sheikh Mohammed", "Ramzi Yousef", "Richard Reid", "Umar Farouk Abdulmutallab", "Anwar al-Awlaki"]
}

word_to_category = {}
for category, words in sensitive_categories.items():
    for word in words:
        word_to_category[word.lower()] = category

# Dictionnaire global pour les cooldowns des sondages
user_cooldown = {}

# Dictionnaires pour les giveaways
giveaways = {}
ended_giveaways = {}
fast_giveaways = {}

# Dictionnaire pour les alertes d'urgence
active_alerts = {}

# Fonction pour v√©rifier si une URL est valide
def is_valid_url(url):
    regex = re.compile(
        r'^(https?://)?'  # http:// ou https:// (optionnel)
        r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # domaine
        r'(/.*)?$'  # chemin (optionnel)
    )
    return bool(re.match(regex, url))

# Pour les stats globales
stats_collection33 = None # Sera initialis√© dans bot.py

# === UTILITAIRE POUR R√âCUP√âRER LA DATE DE D√âBUT ===
def get_start_date(guild_id, db_collections):
    start_date_data = db_collections["start_date"].find_one({"guild_id": guild_id})
    if start_date_data:
        return datetime.fromisoformat(start_date_data["start_date"])
    return None

# Config des r√¥les pour l'auto-collecte (d√©plac√© ici pour √™tre globalement accessible)
COLLECT_ROLES_CONFIG = [
    {
        "role_id": 1355157715550470335, #Membres
        "amount": 1000,
        "cooldown": 3600,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365683057591582811, #Roi des Pirates
        "amount": 12500,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365683477868970204, #Amiral en Chef
        "amount": 15000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365682989996052520, #Yonko
        "amount": 5000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365683407023243304, #Commandant
        "amount": 7500,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365682918243958826, #Corsaires
        "amount": 3000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365683324831531049, #Lieutenant
        "amount": 5000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365682795501977610, #Pirates
        "amount": 1000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365683175019516054, #Matelot
        "amount": 2000,
        "cooldown": 43200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365698043684327424, #Haki de l'armement Inferieur
        "amount": 5000,
        "cooldown": 7200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1365389381246124084, #Haki de l'Armement Avanc√©
        "amount": 10000,
        "cooldown": 7200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1363969965572755537, #Nen Maudit
        "percent": -20,
        "cooldown": 7200,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365313255471579297, #Soumsi a Nika
        "percent": -10,
        "cooldown": 86400,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365313257279062067, #Gol Gol no Mi
        "percent": 3,
        "cooldown": 86400,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365313261129568297, #Gear Second
        "percent": 5,
        "cooldown": 3600,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365312301900501063, #Nika Collect
        "percent": 500,
        "cooldown": 3600,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365313287964725290, #Soumis Bourrasque Devastatrice
        "percent": -50,
        "cooldown": 3600,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1365312292069048443, #Tonnere Divin
        "percent": -70,
        "cooldown": 86400,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1355903910635770098, #God of Glory
        "amount": 12500,
        "cooldown": 86400,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1034546767104069663, #Booster
        "amount": 5000,
        "cooldown": 7200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1363974710739861676, #Collect Bank
        "percent": 1,
        "cooldown": 3600,
        "auto": True,
        "target": "bank"
    },
    {
        "role_id": 1363948445282341135, #Mode Ermite
        "amount": 5000,
        "cooldown": 7200,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157729362313308, #Grade E
        "amount": 1000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157728024072395, #Grade D
        "amount": 2000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157726032035881, #Grade C
        "amount": 3000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157725046243501, #Grade B
        "amount": 4000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157723960049787, #Grade A
        "amount": 5000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157722907279380, #Grade S
        "amount": 6000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157721812435077, #Grade National
        "amount": 7000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1355157720730439701, #Grade Etheryens
        "amount": 8000,
        "cooldown": 7100,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1367567412886765589, #Grade Divin
        "amount": 8000,
        "cooldown": 3600,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1372978490256920586, #Grade Divin
        "amount": 5000,
        "cooldown": 3600,
        "auto": False,
        "target": "bank"
    }
]

TOP_ROLES = {
    1: 1363923497885237298,  # ID du r√¥le Top 1
    2: 1363923494504501510,  # ID du r√¥le Top 2
    3: 1363923356688056401,  # ID du r√¥le Top 3
}

# Fonctions utilitaires pour l'√©conomie (d√©plac√©es de eco0.py)
async def check_user_has_item(db_collections, user: discord.Member, item_id: int):
    # Ici tu devras interroger la base de donn√©es MongoDB ou autre pour savoir si l'utilisateur poss√®de cet item
    # Par exemple:
    result = db_collections["joueur_ether_inventaire"].find_one({"user_id": user.id, "item_id": item_id})
    return result is not None

def get_cf_config_eco(db_collections, guild_id):
    config = db_collections["info_cf"].find_one({"guild_id": guild_id})
    if not config:
        # Valeurs par d√©faut
        config = {
            "guild_id": guild_id,
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        db_collections["info_cf"].insert_one(config)
    return config

async def initialize_bounty_or_honor(db_collections, user_id, is_pirate, is_marine):
    # V√©rifier si le joueur est un pirate et n'a pas encore de prime
    if is_pirate:
        bounty_data = db_collections["ether_bounty"].find_one({"user_id": user_id})
        if not bounty_data:
            # Si le joueur n'a pas de prime, initialiser √† 50
            db_collections["ether_bounty"].insert_one({"user_id": user_id, "bounty": 50})

    # V√©rifier si le joueur est un marine et n'a pas encore d'honneur
    if is_marine:
        honor_data = db_collections["ether_honor"].find_one({"user_id": user_id})
        if not honor_data:
            # Si le joueur n'a pas d'honneur, initialiser √† 50
            db_collections["ether_honor"].insert_one({"user_id": user_id, "honor": 50})

def get_or_create_user_data(db_collections, guild_id: int, user_id: int):
    data = db_collections["ether_eco"].find_one({"guild_id": guild_id, "user_id": user_id})
    if not data:
        data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        db_collections["ether_eco"].insert_one(data)
    return data

# Placeholder pour les badges, √† d√©finir si n√©cessaire
BADGES = [] 

def insert_badge_into_db(db_collections):
    # Ins√©rer les badges d√©finis dans la base de donn√©es MongoDB
    for badge in BADGES:
        # V√©rifier si le badge est d√©j√† pr√©sent
        if not db_collections["ether_badge"].find_one({"id": badge["id"]}):
            db_collections["ether_badge"].insert_one(badge)

# Fonction pour enregistrer un message du joueur dans la base de donn√©es
async def enregistrer_message_jour(db_collections, user_id, message_content):
    date_aujourdhui = datetime.utcnow().strftime('%Y-%m-%d')
    db_collections["message_jour"].update_one(
        {"user_id": user_id, "date": date_aujourdhui},
        {"$push": {"messages": message_content}},
        upsert=True
    )

# Fonctions pour les vues (d√©plac√©es ici pour √™tre importables)
class GuideView(View):
    def __init__(self, thread):
        super().__init__(timeout=180) # Ajout d'un timeout
        self.thread = thread
        self.message_sent = False

    @discord.ui.button(label="üìò Guide", style=discord.ButtonStyle.success, custom_id="guide_button_unique")
    async def guide(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not self.message_sent:
            await interaction.response.defer()
            await start_tutorial(self.thread, interaction.user)
            self.message_sent = True
            button.disabled = True # D√©sactiver le bouton apr√®s utilisation
            await interaction.message.edit(view=self) # Mettre √† jour la vue

    @discord.ui.button(label="‚ùå Non merci", style=discord.ButtonStyle.danger, custom_id="no_guide_button_unique")
    async def no_guide(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Fermeture du fil...", ephemeral=True)
        await asyncio.sleep(2)
        await self.thread.delete()

class NextStepView(View):
    def __init__(self, thread):
        super().__init__(timeout=180) # Ajout d'un timeout
        self.thread = thread

    @discord.ui.button(label="‚û°Ô∏è Passer √† la suite", style=discord.ButtonStyle.primary, custom_id="next_button")
    async def next_step(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user = interaction.user

        await send_economy_info(user)

        await self.thread.send("üì© Les d√©tails de cette √©tape ont √©t√© envoy√©s en message priv√©.")
        await asyncio.sleep(2)
        await self.thread.send("üóëÔ∏è Ce fil sera supprim√© dans quelques instants.")
        await asyncio.sleep(3)
        await self.thread.delete()

async def wait_for_command(thread, user, command):
    def check(msg):
        return msg.channel == thread and msg.author == user and msg.content.startswith(command)

    await thread.send(f"üïí En attente de `{command}`...")
    await thread.bot.wait_for("message", check=check) # Utiliser thread.bot pour acc√©der au bot
    await thread.send("‚úÖ Commande ex√©cut√©e ! Passons √† la suite. üöÄ")
    await asyncio.sleep(2)

async def start_tutorial(thread, user):
    tutorial_steps = [
        ("üíº **Commande Travail**", "Utilise `!!work` pour gagner un salaire r√©guli√®rement !", "!!work"),
        ("üì¶ **Commande Quotidient**", "Utilise !!daily pour gagner un salaire quotidient !", "!!daily"),
        ("üíÉ **Commande Slut**", "Avec `!!slut`, tente de gagner de l'argent... Mais attention aux risques !", "!!slut"),
        ("üî´ **Commande Crime**", "Besoin de plus de frissons ? `!!crime` te plonge dans des activit√©s ill√©gales !", "!!crime"),
        ("üåø **Commande Collecte**", "Avec `!!collect`, tu peux ramasser des ressources utiles !", "!!collect"),
        ("üìä **Classement**", "D√©couvre qui a le plus d'argent en cash avec `!!lb -cash` !", "!!lb -cash"),
        ("üïµÔ∏è **Voler un joueur**", "Tente de d√©rober l'argent d'un autre avec `!!rob @user` !", "!!rob"),
        ("üè¶ **D√©p√¥t Bancaire**", "Pense √† s√©curiser ton argent avec `!!dep all` !", "!!dep all"),
        ("üí∞ **Solde Bancaire**", "V√©rifie ton argent avec `!!bal` !", "!!bal"),
    ]

    for title, desc, cmd in tutorial_steps:
        embed = discord.Embed(title=title, description=desc, color=discord.Color.blue())
        await thread.send(embed=embed)
        await wait_for_command(thread, user, cmd)

    games_embed = discord.Embed(
        title="üé≤ **Autres Commandes de Jeux**",
        description="D√©couvre encore plus de moyens de t'amuser et gagner des Ezryn Coins !",
        color=discord.Color.gold()
    )
    games_embed.add_field(name="üêî Cock-Fight", value="`!!cf <amount>` - Combat de Poulet !", inline=False)
    games_embed.add_field(name="üÉè Blackjack", value="`!!bj <amount>` - Jeux de Carte !", inline=False)
    games_embed.add_field(name="üé∞ Slot Machine", value="`!!sm <amount>` - Tente un jeu risqu√© !", inline=False)
    games_embed.add_field(name="üî´ Roulette Russe", value="`!!rr <amount>` - Joue avec le destin !", inline=False)
    games_embed.add_field(name="üé° Roulette", value="`!!roulette <amount>` - Fais tourner la roue de la fortune !", inline=False)
    games_embed.set_footer(text="Amuse-toi bien sur Etherya ! üöÄ")

    await thread.send(embed=games_embed)
    await thread.send("Clique sur **Passer √† la suite** pour d√©couvrir les syst√®mes impressionnants de notre Economie !", view=NextStepView(thread))

async def send_economy_info(user: discord.Member):
    try:
        economy_embed = discord.Embed(
            title="üìå **Lis ces salons pour optimiser tes gains !**",
            description=(
                "Bienvenue dans l'√©conomie du serveur ! Pour en tirer le meilleur profit, assure-toi de lire ces salons :\n\n"
                "üí∞ **Comment acc√©der √† l'economie ?**\n‚ûú <#1355190022047011117>\n\n"
                "üìñ **Informations g√©n√©rales**\n‚ûú <#1355158018517500086>\n\n"
                "üí∞ **Comment gagner des Coins ?**\n‚ûú <#1355157853299675247>\n\n"
                "üè¶ **Banque de l'√âconomie **\n‚ûú <#1364531840144244819>\n\n"
                "üéüÔ∏è **Ticket Finances** *(Pose tes questions ici !)*\n‚ûú <#1355157942005006558>\n\n"
                "üìà **Astuce :** Plus tu en sais, plus tu gagnes ! Alors prends quelques minutes pour lire ces infos. üöÄ"
            ),
            color=discord.Color.gold()
        )
        economy_embed.set_thumbnail(url="https://cdn.discordapp.com/emojis/1168755764760559637.webp?size=96&quality=lossless")
        economy_embed.set_footer(text="Bon jeu et bons profits ! üí∞")

        dm_channel = await user.create_dm()
        await dm_channel.send(embed=economy_embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un MP √† {user.name} ({user.id})")

# Placeholder pour TicketView et ClaimCloseView (√† d√©finir si elles sont utilis√©es ailleurs)
class TicketView(View):
    def __init__(self, author_id):
        super().__init__(timeout=None)
        self.author_id = author_id

class ClaimCloseView(View):
    def __init__(self):
        super().__init__(timeout=None)

